from collections import UserDict
import secrets
<<<<<<< Updated upstream
from typing import Any, Dict

from pydantic import BaseSettings, EmailStr
from devops_sccs.cache import ThreadsafeCache
||||||| constructed merge base
from pydantic import BaseSettings, EmailStr, Field
=======
from typing import Any, Dict, List
>>>>>>> Stashed changes

from devops_sccs.cache import ThreadsafeCache
from pydantic import BaseModel, BaseSettings, EmailStr


class Environment(BaseSettings):
    API_V1_STR = "/api/v1"
    HOOKS_API_STR = "/bitbucketcloud/hooks/repo"
    SECRET_KEY = secrets.token_urlsafe(32)
    ACCESS_TOKEN_TTL: int = 60 * 24 * 7  # 7 days

<<<<<<< Updated upstream
    ENVIRONMENT: str

    USERNAME: EmailStr
    PASSWORD: str
||||||| constructed merge base
    ENVIRONMENT: str

    SUPERUSER_USERNAME: EmailStr
    SUPERUSER_PASSWORD: str

    USERNAME: EmailStr
    PASSWORD: str
=======
    ENVIRONMENT: str = "development"

    USERNAME: EmailStr | None = None
    PASSWORD: str | None = None
>>>>>>> Stashed changes

    MOCK_USERS = {
        "croix_bleue": {
            "id": 0,
            "username": "croix_bleue",
            "email": "cb@qc.croixbleue.ca",
            "full_name": "Croix Bleue",
            "password": "password",
        },
        "tom": {
            "id": 1,
            "username": "tom",
            "email": "tom@superacteur.com",
            "full_name": "The Real Tom Cruise",
            "password": "TomCruiseIsTheBest",
        },
    }
<<<<<<< Updated upstream
    INIT_CACHE: Dict[str, Any] = {}

    class Config:
        env_file = None


settings = Settings()  # type: ignore

cache = ThreadsafeCache(settings.INIT_CACHE)


class ExternalConfig(UserDict[str, str]):
    def __init__(self, config: Dict[str, str]):
        super().__init__(config)
        if config:
            self.parse_config(config)

    def parse_config(self, config: Dict[str, str]):
        self.cd_environments = config["continuous_deployment"]["environments"]
        self.cd_branches_accepted = [env["branch"] for env in self.cd_environments]
        self.cd_pullrequest_tag = config["continuous_deployment"]["pullrequest"]["tag"]
        self.cd_versions_available = config["continuous_deployment"]["pipeline"][
            "versions_available"
        ]
        self.watcher_user = config["watcher"]["user"]
        self.watcher_pwd = config["watcher"]["pwd"]
        self.vault_secret = config["su"]["vault_secret"]
        self.vault_mount = config["su"]["vault_mount"]

||||||| constructed merge base
    
=======
    INIT_CACHE: Dict[str, Any] = {}

    class Config:
        env_file = None


environment = Environment()

cache = ThreadsafeCache(environment.INIT_CACHE)


class ExternalConfig(BaseModel):
    cd_environments: List[Dict[str, Any]]
    cd_branches_accepted: List[str]
    cd_pullrequest_tag: str
    cd_versions_available: List[str]

    # TODO should probably be renamed to "bitbucket_username"
    watcher_user: str
    # bitbucket_password
    watcher_pwd: str

    vault_secret: str
    vault_mount: str

    team: str


def flatten_external_config(config: Dict[str, Any]):

    cd_environments = config["continuous_deployment"]["environments"]
    cd_branches_accepted = [env["branch"] for env in cd_environments]

    return ExternalConfig(
        cd_environments=cd_environments,
        cd_branches_accepted=cd_branches_accepted,
        cd_pullrequest_tag=config["continuous_deployment"]["pullrequest"]["tag"],
        cd_versions_available=config["continuous_deployment"]["pipeline"][
            "versions_available"
        ],
        watcher_user=config["watcher"]["user"],
        watcher_pwd=config["watcher"]["pwd"],
        vault_secret=config["su"]["vault_secret"],
        vault_mount=config["su"]["vault_mount"],
        team=config["team"],
    )

>>>>>>> Stashed changes

<<<<<<< Updated upstream
external_config: ExternalConfig = ExternalConfig({})
||||||| constructed merge base
settings = Settings(_env_file='.env')
=======
external_config: ExternalConfig | None = None
>>>>>>> Stashed changes
